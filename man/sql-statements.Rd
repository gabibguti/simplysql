% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_sql.R
\name{query_sql}
\alias{query_sql}
\alias{execute_sql}
\title{Run parametric SQL statements and queries}
\usage{
query_sql(.sql, ..., .envir = parent.frame(), .verbose = FALSE, .con = NULL)

execute_sql(.sql, ..., .envir = parent.frame(), .verbose = FALSE, .con = NULL)
}
\arguments{
\item{.sql}{string containing the parametric SQL expression.}

\item{...}{
  Arguments passed on to \code{\link[=write_sql]{write_sql}}
  \describe{
    \item{\code{}}{}
  }}

\item{.envir}{environment in which to lookup parametric values not found in
\code{...}. By default, looks at the current calling environment.}

\item{.verbose}{Whether to display the resulting SQL call, useful during
development.}

\item{.con}{the SQL connection to the database. If \code{NULL}, uses the
connection defined by calling \code{\link[=start_sql_connection]{start_sql_connection()}}.}
}
\value{
For \code{query_sql}, the output of the SQL query as a \code{data.frame}.

For \code{execute_sql}, the number of rows modified by the statement.
}
\description{
Run parametric SQL statements and queries
}
\details{
See \code{\link[=write_sql]{write_sql()}} to see how \code{...} parameters must be defined.

These functions are basically simple wrappers around \code{\link[DBI:dbExecute]{DBI::dbExecute()}} and
\code{\link[DBI:dbGetQuery]{DBI::dbGetQuery()}}.
}
\examples{
\dontrun{
bar <- 1
get_query("
  SELECT *
  From Foo
  WHERE a = {bar}")
# output of "SELECT * From Foo WHERE a = 1"
}

}
\concept{SQL expressions}
