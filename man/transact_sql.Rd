% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transact_sql.R
\name{transact_sql}
\alias{transact_sql}
\alias{break_sql}
\title{Perform SQL operations within a transaction}
\usage{
transact_sql(fun, ...)

break_sql()
}
\arguments{
\item{fun}{A function which contains all desired SQL operations}

\item{...}{Arguments passed to \code{fun()}}
}
\value{
Returns the value returned by \code{fun()}, or \code{NULL} if \code{break_sql()}
was called.
}
\description{
A transaction allows SQL operations to be batched, such that either all
operations are applied or none are. In the jargon, the entire transaction is
either committed or rolled back. This is useful to ensure database
consistency, without the risk of partial changes caused by unexpected errors
in the middle of an operation.
}
\details{
\code{transact_sql()} calls \code{fun()} within a transaction. There are three possible
outcomes:
\itemize{
\item if the function returns successfully, then the transaction is committed;
\item if an error is thrown, then the transaction is rolled back and the error
is propagated so that it may be handled elsewhere;
\item if \code{break_sql()} is called withn \code{fun()}, then \code{fun()} is interrupted and
the transaction is rolled back, but no error is thrown and the program may
proceed as normal.
}

If \code{break_sql()} is called outside of a function passed to \code{transact_sql()},
it will throw an error.
}
